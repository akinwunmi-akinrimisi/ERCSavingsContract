/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SaveERC20Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "depositForAnotherUser"
      | "depositForAnotherUserFromWithin"
      | "getAnyBalance"
      | "getContractBalance"
      | "myBalance"
      | "owner"
      | "ownerWithdraw"
      | "tokenAddress"
      | "transferFunds"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DepositSuccessful"
      | "TransferSuccessful"
      | "WithdrawalSuccessful"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForAnotherUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositForAnotherUserFromWithin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnyBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myBalance", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFunds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositForAnotherUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositForAnotherUserFromWithin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositSuccessfulEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSuccessfulEvent {
  export type InputTuple = [
    from: AddressLike,
    _to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, _to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    _to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalSuccessfulEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SaveERC20 extends BaseContract {
  connect(runner?: ContractRunner | null): SaveERC20;
  waitForDeployment(): Promise<this>;

  interface: SaveERC20Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  depositForAnotherUser: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositForAnotherUserFromWithin: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAnyBalance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  myBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerWithdraw: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  transferFunds: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositForAnotherUser"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositForAnotherUserFromWithin"
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAnyBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerWithdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferFunds"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DepositSuccessful"
  ): TypedContractEvent<
    DepositSuccessfulEvent.InputTuple,
    DepositSuccessfulEvent.OutputTuple,
    DepositSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "TransferSuccessful"
  ): TypedContractEvent<
    TransferSuccessfulEvent.InputTuple,
    TransferSuccessfulEvent.OutputTuple,
    TransferSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalSuccessful"
  ): TypedContractEvent<
    WithdrawalSuccessfulEvent.InputTuple,
    WithdrawalSuccessfulEvent.OutputTuple,
    WithdrawalSuccessfulEvent.OutputObject
  >;

  filters: {
    "DepositSuccessful(address,uint256)": TypedContractEvent<
      DepositSuccessfulEvent.InputTuple,
      DepositSuccessfulEvent.OutputTuple,
      DepositSuccessfulEvent.OutputObject
    >;
    DepositSuccessful: TypedContractEvent<
      DepositSuccessfulEvent.InputTuple,
      DepositSuccessfulEvent.OutputTuple,
      DepositSuccessfulEvent.OutputObject
    >;

    "TransferSuccessful(address,address,uint256)": TypedContractEvent<
      TransferSuccessfulEvent.InputTuple,
      TransferSuccessfulEvent.OutputTuple,
      TransferSuccessfulEvent.OutputObject
    >;
    TransferSuccessful: TypedContractEvent<
      TransferSuccessfulEvent.InputTuple,
      TransferSuccessfulEvent.OutputTuple,
      TransferSuccessfulEvent.OutputObject
    >;

    "WithdrawalSuccessful(address,uint256)": TypedContractEvent<
      WithdrawalSuccessfulEvent.InputTuple,
      WithdrawalSuccessfulEvent.OutputTuple,
      WithdrawalSuccessfulEvent.OutputObject
    >;
    WithdrawalSuccessful: TypedContractEvent<
      WithdrawalSuccessfulEvent.InputTuple,
      WithdrawalSuccessfulEvent.OutputTuple,
      WithdrawalSuccessfulEvent.OutputObject
    >;
  };
}
